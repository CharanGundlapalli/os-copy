#include <stdio.h>

int main() {
    int p, r, i, j, k;
    int alloc[10][10], max[10][10], need[10][10], avail[10];
    int seq[10], work[10], finish[10];

    // Input the number of processes and resources
    printf("Enter number of processes: ");
    scanf("%d", &p);
    printf("Enter number of resources: ");
    scanf("%d", &r);

    // Input the Allocation matrix
    printf("Enter allocation matrix:\n");
    for (i = 0; i < p; i++) {
        for (j = 0; j < r; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }

    // Input the Maximum matrix
    printf("Enter maximum matrix:\n");
    for (i = 0; i < p; i++) {
        for (j = 0; j < r; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Input the Available resources
    printf("Enter available resources:\n");
    for (i = 0; i < r; i++) {
        scanf("%d", &avail[i]);
        work[i] = avail[i];  // Initialize work[] with available resources
    }

    // Calculate the Need matrix
    for (i = 0; i < p; i++) {
        for (j = 0; j < r; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }

    // Initialize the finish array to 0 (false) for all processes
    for (i = 0; i < p; i++) {
        finish[i] = 0;
    }

    int count = 0;  // Count of processes that have finished
    int safeSeq[10]; // To store the safe sequence

    // Banker's Algorithm: Find the safe sequence
    while (count < p) {
        int found = 0;
        for (i = 0; i < p; i++) {
            if (finish[i] == 0) {  // If the process has not finished
                int flag = 1;
                for (j = 0; j < r; j++) {
                    if (need[i][j] > work[j]) {
                        flag = 0;
                        break;
                    }
                }

                // If need can be satisfied
                if (flag == 1) {
                    // Process can finish
                    for (k = 0; k < r; k++) {
                        work[k] += alloc[i][k];  // Release resources
                    }

                    safeSeq[count++] = i;  // Add process to safe sequence
                    finish[i] = 1;  // Mark process as finished
                    found = 1;
                }
            }
        }

        // If no process could be found in this iteration, no safe sequence
        if (found == 0) {
            printf("The system is not in a safe state.\n");
            return 0;
        }
    }

    // Print the safe sequence
    printf("The system is in a safe state.\nSafe sequence is: ");
    for (i = 0; i < p; i++) {
        printf("P%d ", safeSeq[i]);
    }
    printf("\n");

    return 0;
}
